
[1mFrom:[0m /home/sid/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/bcrypt-3.1.7/lib/bcrypt/password.rb @ line 1:
[1mModule[0m [1mname:[0m BCrypt[1m
Number of monkeypatches: [0m2. Use the `-a` option to display all available monkeypatches
[1mNumber of lines:[0m 87

[32mmodule[0m [1;35;4mBCrypt[0m
  [1;34m# A password management class which allows you to safely store users' passwords and compare them.[0m
  [1;34m#[0m
  [1;34m# Example usage:[0m
  [1;34m#[0m
  [1;34m#   include BCrypt[0m
  [1;34m#[0m
  [1;34m#   # hash a user's password[0m
  [1;34m#   @password = Password.create("my grand secret")[0m
  [1;34m#   @password #=> "$2a$10$GtKs1Kbsig8ULHZzO1h2TetZfhO4Fmlxphp8bVKnUlZCBYYClPohG"[0m
  [1;34m#[0m
  [1;34m#   # store it safely[0m
  [1;34m#   @user.update_attribute(:password, @password)[0m
  [1;34m#[0m
  [1;34m#   # read it back[0m
  [1;34m#   @user.reload![0m
  [1;34m#   @db_password = Password.new(@user.password)[0m
  [1;34m#[0m
  [1;34m#   # compare it after retrieval[0m
  [1;34m#   @db_password == "my grand secret" #=> true[0m
  [1;34m#   @db_password == "a paltry guess"  #=> false[0m
  [1;34m#[0m
  [32mclass[0m [1;35;4mPassword[0m < [1;34;4mString[0m
    [1;34m# The hash portion of the stored password hash.[0m
    attr_reader [33m:checksum[0m
    [1;34m# The salt of the store password hash (including version and cost).[0m
    attr_reader [33m:salt[0m
    [1;34m# The version of the bcrypt() algorithm used to create the hash.[0m
    attr_reader [33m:version[0m
    [1;34m# The cost factor used to create the hash.[0m
    attr_reader [33m:cost[0m

    [32mclass[0m << [1;35;4mself[0m
      [1;34m# Hashes a secret, returning a BCrypt::Password instance. Takes an optional <tt>:cost</tt> option, which is a[0m
      [1;34m# logarithmic variable which determines how computational expensive the hash is to calculate (a <tt>:cost</tt> of[0m
      [1;34m# 4 is twice as much work as a <tt>:cost</tt> of 3). The higher the <tt>:cost</tt> the harder it becomes for[0m
      [1;34m# attackers to try to guess passwords (even if a copy of your database is stolen), but the slower it is to check[0m
      [1;34m# users' passwords.[0m
      [1;34m#[0m
      [1;34m# Example:[0m
      [1;34m#[0m
      [1;34m#   @password = BCrypt::Password.create("my secret", :cost => 13)[0m
      [32mdef[0m [1;34mcreate[0m(secret, options = {})
        cost = options[[33m:cost[0m] || [1;34;4mBCrypt[0m::[1;34;4mEngine[0m.cost
        raise [1;34;4mArgumentError[0m [32mif[0m cost > [1;34m31[0m
        [1;34;4mPassword[0m.new([1;34;4mBCrypt[0m::[1;34;4mEngine[0m.hash_secret(secret, [1;34;4mBCrypt[0m::[1;34;4mEngine[0m.generate_salt(cost)))
      [32mend[0m

      [32mdef[0m [1;34mvalid_hash?[0m(h)
        h =~ [35m[1;35m/[0m[35m^[1;35m\$[0m[35m[0-9a-z]{2}[1;35m\$[0m[35m[0-9]{2}[1;35m\$[0m[35m[A-Za-z0-9[1;35m\.[0m[35m[1;35m\/[0m[35m]{53}$[1;35m/[0m[35m[0m
      [32mend[0m
    [32mend[0m

    [1;34m# Initializes a BCrypt::Password instance with the data from a stored hash.[0m
    [32mdef[0m [1;34minitialize[0m(raw_hash)
      [32mif[0m valid_hash?(raw_hash)
        [1;36mself[0m.replace(raw_hash)
        @version, @cost, @salt, @checksum = split_hash([1;36mself[0m)
      [32melse[0m
        raise [1;34;4mErrors[0m::[1;34;4mInvalidHash[0m.new([31m[1;31m"[0m[31minvalid hash[1;31m"[0m[31m[0m)
      [32mend[0m
    [32mend[0m

    [1;34m# Compares a potential secret against the hash. Returns true if the secret is the original secret, false otherwise.[0m
    [32mdef[0m [1;34m==[0m(secret)
      [32msuper[0m([1;34;4mBCrypt[0m::[1;34;4mEngine[0m.hash_secret(secret, @salt))
    [32mend[0m
    alias_method [33m:is_password?[0m, [33m:==[0m

  private

    [1;34m# Returns true if +h+ is a valid hash.[0m
    [32mdef[0m [1;34mvalid_hash?[0m(h)
      [1;36mself[0m.class.valid_hash?(h)
    [32mend[0m

    [1;34m# call-seq:[0m
    [1;34m#   split_hash(raw_hash) -> version, cost, salt, hash[0m
    [1;34m#[0m
    [1;34m# Splits +h+ into version, cost, salt, and hash and returns them in that order.[0m
    [32mdef[0m [1;34msplit_hash[0m(h)
      _, v, c, mash = h.split([31m[1;31m'[0m[31m$[1;31m'[0m[31m[0m)
      [32mreturn[0m v, c.to_i, h[[1;34m0[0m, [1;34m29[0m].to_str, mash[[1;34m-31[0m, [1;34m31[0m].to_str
    [32mend[0m
  [32mend[0m

[32mend[0m
